WaarpR66 Server and Clients Configuration

*How to configure Waarp OpenR66

**Configuration files

  In the zip distribution <WaarpR66-X.Y.Z-dist.zip> (available at Github for download),
  you will find an extra directory named: <src/main/config> where several examples files are located as:
  <config-serverA.xml>, <config-serverB.xml>. Other files like <config-clientA.xml> are for clients, and
  <config-serverInitA.xml>, <OpenR66-authent-A.xml>, <limitConfiga.xml>, <*.rule.xml>, certs/*.cer/*.jks/*.ggp 
  are for initialization or password storage.

  A detailed description of their contents can be found in {{{./Config-OpenR66-Server.html}Config OpenR66 Server}},
  {{{./Config-OpenR66-Client.html}Config OpenR66 Client}}, {{{./Config-OpenR66-ClientNoDB.html}Config OpenR66 Client with No Database}},
  {{{./Config-OpenR66-SubmitClient.html}Config OpenR66 Client for Submit Only}}, {{{./OpenR66-Limit.html}Config OpenR66 Limits}},
  {{{./OpenR66-Rule.html}Config OpenR66 Rule}},
  {{{./OpenR66-Authent.html}Config OpenR66 Authentications}}
  and {{{./Config-Snmp.html}Config for OpenR66 SNMP support}}.
  
  The first ones (<config-ServerX.xml>) specifies the general behavior for the OpenR66 Server:

  * server names, ports, home directory and subdirectories, ssl key

  * server admin name and password (for administrator access and shutdown function)

  * server special configuration like threads number, timeout of connection, deleteOnAbort,
    usenio, fastmd5, blocksize

  * server database configuration

  []

  The second one (<config-clientX.xml>) is a configuration file for OpenR66 Client:

  * client names, home directory and subdirectories, optionally ssl key

  * server special configuration like threads number, timeout of connection, deleteOnAbort,
    usenio, fastmd5, blocksize

  * optionally server database configuration

  []

  The file <config-serverInitC.xml> is an example of how to instantiate the database with the correct values in it.
  The values are from:

  * <config-serverInitX.xml> : host name and database access

  * rules_directory where <*.rule.xml> files are: all information needed to process a rule (directories,
  actions on pre transfer, post transfer and error status).

  * host_authent_file <OpenR66-authent-A.xml> (host name, address, ports and ssl support) and
  the associated <*.ggp> for password:

  * limit_configuration_file <limitConfiga.xml> where session and global limit for bandwitdth are specified.

**Steps

  *Create keys for SSH and Passwords (see {{{./sslconfig.html}Config OpenR66 OpenSSL and WaarpPassword GUI project}})

  *Create configurations files (server configuration file, authentication configuration file, rule configuration file, snmp configuration file) for a server
  
  *Create configurations files (client configuration file, authentication configuration file, rule configuration file) for a client
  
  *Create the database using the ServerInitDatabase (see {{{./commands.html}Commands detail}})

  A simplified picture of the OpenR66 Database schema is shown here:

[images/OpenR66-database.png] Waarp OpenR66 Database Schema
  
  *Make some tests for server using Message command to all declared interface (NOSSL and SSL) (see {{{./commands.html}Commands detail}})

*How to run Waarp OpenR66

  It can be started like:

----------------------------------------
  java ... classpath and jvm settings ... <org.waarp.openr66.server.R66Server> <src/main/config/configX.xml>
----------------------------------------

  Note that in the classpath you need :

  *External jars:

    *{{{http://netty.io}Netty}}

    *{{{http://commons.apache.org/io/}Apache-Commons-IO}}

    *{{{http://commons.apache.org/exec/}Apache-Commons-Exec}}

    *{{{http://commons.apache.org/compress/}Apache-Commons-Compress}}

    *{{{http://commons.apache.org/codec/}Apache-Commons-Codec}}

    *{{{http://www.dom4j.org/}DOM4J}}

    *{{{http://jaxen.codehaus.org/}Jaxen}}

    *{{{http://www.slf4j.org/}SLF4J}}

    *{{{http://logback.qos.ch/}Logback}}
    
    *{{{https://github.com/jezhumble/javasysmon}JavaSysMon}}

    *{{{http://www.snmp4j.org}SNMP4J}}

    *<Database JDBC support> for instance for H2, PostGreSQL, Oracle, MySQL

  *Waarp jars:

    *<NettyExtension>

    *<WaarpDigest>

    *<WaarpCommon>

	*<WaarpExec>
	
	*<WaarpSnmp>

  []

  To shutdown the service, either you do if Unix (not under Windows)

----------------------------------------
  kill -s USR1 <processID>
----------------------------------------

  Or use the TERM (15) signal

----------------------------------------
  kill -s TERM <processID>
----------------------------------------

  or much better you connect as an admin user into the Administrator (HTTPS) and ask to shutdown

  or you use the command line:

----------------------------------------
  java ... classpath and jvm settings ... <openr66.server.R66Server> <src/main/config/configX.xml>
----------------------------------------

  where the password is the one in the <config.xml> for admin actions.


  Hope this helps a bit... If you have any questions, remarks, just ask!
